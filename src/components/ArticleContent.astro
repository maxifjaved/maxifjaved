---
import MarkdownIt from 'markdown-it';

interface Props {
  content: any;
}

const { content } = Astro.props;

const md = new MarkdownIt({
  html: true,
  linkify: true,
  typographer: true
});

// Add target="_blank" and rel="noopener noreferrer" to all links
const defaultRender = md.renderer.rules.link_open || function(tokens, idx, options, env, self) {
  return self.renderToken(tokens, idx, options);
};

md.renderer.rules.link_open = function (tokens, idx, options, env, self) {
  const aIndex = tokens[idx].attrIndex('target');

  if (aIndex < 0) {
    tokens[idx].attrPush(['target', '_blank']);
  } else {
    tokens[idx].attrs[aIndex][1] = '_blank';
  }

  const relIndex = tokens[idx].attrIndex('rel');
  if (relIndex < 0) {
    tokens[idx].attrPush(['rel', 'noopener noreferrer']);
  } else {
    tokens[idx].attrs[relIndex][1] = 'noopener noreferrer';
  }

  return defaultRender(tokens, idx, options, env, self);
};

// Split content into sections for mid-article image placement
let firstHalfContent = '';
let secondHalfContent = '';
let midArticleImage = null;

// Build citation references for markdown links
let citationReferences = '';
if (content?.citations && Array.isArray(content.citations)) {
  citationReferences = content.citations
    .map((citation: any) => {
      // Extract actual URL if it's wrapped in markdown format [url](url)
      let url = citation.url;
      const markdownLinkMatch = url.match(/\[([^\]]+)\]\(([^)]+)\)/);
      if (markdownLinkMatch) {
        url = markdownLinkMatch[2]; // Use the URL from parentheses
      }
      return `[${citation.id}]: ${url} "${citation.title}"`;
    })
    .join('\n');
}

if (typeof content === 'string') {
  firstHalfContent = md.render(content + '\n\n' + citationReferences);
} else if (content) {
  const firstSections = [
    content.introduction_markdown,
    content.main_content_markdown,
  ].filter(Boolean);

  const secondSections = [
    content.decision_framework_markdown,
    content.practical_guidance_markdown,
    content.real_world_example_markdown,
    content.conclusion_markdown
  ].filter(Boolean);

  // Add citation references to the markdown content
  const firstContent = firstSections.join('\n\n') + '\n\n' + citationReferences;
  const secondContent = secondSections.join('\n\n') + '\n\n' + citationReferences;

  firstHalfContent = md.render(firstContent);
  secondHalfContent = md.render(secondContent);
  midArticleImage = content.mid_article_image;
}
---

<div class="post-content">
  <div set:html={firstHalfContent} />

  {midArticleImage && (
    <figure class="my-8">
      <img
        src={`/img/blogs/${midArticleImage.file}`}
        alt={midArticleImage.alt}
        class="w-full rounded-lg"
      />
      {midArticleImage.caption && (
        <figcaption class="mt-2 text-center text-sm text-gray-400">
          {midArticleImage.caption}
        </figcaption>
      )}
    </figure>
  )}

  <div set:html={secondHalfContent} />
</div>