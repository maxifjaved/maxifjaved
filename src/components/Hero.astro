---
export interface HeroType {
  title: string;
  subtitle: string;
  description: string;
  img: string;
  label1: string;
  label2: string;
  buttons: {
    label: string;
    href: string;
    isPrimary: boolean;
    isSmooth: boolean;
  }[];
  socialLinks: { icon: string; href: string }[];
}

const heroData: HeroType = {
  title: "Asif Javed",
  subtitle: "AI Integration Expert & Full-Stack Developer",
  description:
    "Transforming businesses with AI-powered solutions | 10+ years experience | Founder of QuranGallery.app | Available for remote work at $85/hour",
  img: "/img/future-ai.png",
  label1: "AI Integration",
  label2: "Full-Stack Dev",
  buttons: [
    {
      label: "View Projects",
      href: "#projects",
      isPrimary: true,
      isSmooth: true,
    },
    {
      label: "Contact ME",
      href: "/contact",
      isPrimary: false,
      isSmooth: false,
    },
  ],
  socialLinks: [
    { icon: "fab fa-github", href: "https://github.com/maxifjaved" },
    { icon: "fab fa-linkedin", href: "https://linkedin.com/in/maxifjaved" },
    {
      icon: "fab fa-whatsapp",
      href: "https://api.whatsapp.com/send?phone=923324647331&text=%F0%9F%93%9E%20Hi%20Asif.%20How%20are%20you%3F",
    },
  ],
};
---

<section
  id="home"
  class="min-h-screen flex items-center pt-20 relative overflow-hidden"
>
  <div class="max-w-7xl mx-auto px-6 py-24 relative">
    <div
      class="absolute w-96 h-96 bg-cyber-blue/10 rounded-full blur-3xl -top-20 -left-20 animate-pulse-slow"
    >
    </div>
    <div
      class="absolute w-64 h-64 bg-cyber-blue/10 rounded-full blur-3xl bottom-10 right-10 animate-pulse-slow"
      style="animation-delay: 2s;"
    >
    </div>

    <div class="grid grid-cols-1 lg:grid-cols-2 gap-12 items-center relative">
      <div class="order-2 lg:order-1">
        <h1 class="text-4xl lg:text-6xl font-bold mb-4">
          <span class="text-cyber-blue text-shadow-glow">{heroData.title}</span>
          <br />
          {heroData.subtitle}
        </h1>
        <p class="text-gray-300 text-lg mb-8">{heroData.description}</p>

        <div class="flex flex-wrap gap-4 font-future">
          {
            heroData.buttons.map((button) => (
              <a
                href={button.href}
                data-type={button.isSmooth ? "smooth" : "link"}
                class={`max-sm:w-full inline-flex items-start justify-center gap-2 cyber-btn ${
                  button.isPrimary
                    ? "bg-cyber-blue hover:bg-cyber-blue/80 text-cyber-dark"
                    : "bg-transparent border border-cyber-blue text-cyber-blue hover:bg-cyber-blue/10"
                } font-bold py-3 px-8 transition-all duration-300 glow`}
              >
                {button.label}
              </a>
            ))
          }
        </div>

        <div class="mt-12 flex gap-6">
          {
            heroData.socialLinks.map((link) => (
              <a
                href={link.href}
                class="text-cyber-blue hover:text-white transition-colors"
              >
                <i class={link.icon + " text-2xl"} />
              </a>
            ))
          }
        </div>
      </div>

      <div class="order-1 lg:order-2 flex justify-center relative">
        <div class="w-64 h-64 md:w-96 md:h-96 relative">
          <div
            class="absolute inset-0 rounded-full border-4 border-cyber-blue/20 animate-pulse"
          >
          </div>
          <div
            class="absolute inset-0 rounded-full border border-cyber-blue/40 animate-spin"
            style="animation-duration: 20s;"
          >
          </div>

          <div
            class="absolute inset-4 rounded-full bg-cyber-blue/5 backdrop-blur-sm border border-cyber-blue glow"
          >
            <div
              class="relative w-full h-full rounded-full overflow-hidden border border-cyber-blue glow"
            >
              <div class="absolute inset-0 bg-cyber-dark blur-3xl"></div>
              <div class="relative">
                <img
                  src={heroData.img}
                  alt={heroData.title}
                  class="w-full h-full"
                />
              </div>
            </div>
          </div>

          <div
            x-data="{ visible: false }"
            x-intersect.once="visible = true"
            x-bind:class="visible ? 'animated fadeInLeft delay100' : 'opacity-0'"
            class="absolute opacity-0 -right-10 md:-right-20 top-0 md:top-1/4 bg-cyber-dark/80 backdrop-blur-sm border border-cyber-blue/20 p-3 rounded-lg shadow-lg glow"
          >
            <div class="text-cyber-blue text-sm font-bold font-future">
              {heroData.label1}
            </div>
            <div class="w-32 h-2 bg-gray-700 rounded-full mt-1">
              <div id="progress1" class="h-2 bg-cyber-blue rounded-full"></div>
            </div>
          </div>
          <div
            x-data="{ visible: false }"
            x-intersect.once="visible = true"
            x-bind:class="visible ? 'animated fadeInRight delay100' : 'opacity-0'"
            class="absolute opacity-0 -left-10 md:-left-20 bottom-0 md:bottom-1/3 bg-cyber-dark/80 backdrop-blur-sm border border-cyber-blue/20 p-3 rounded-lg shadow-lg glow"
          >
            <div class="text-cyber-blue text-sm font-bold font-future">
              {heroData.label2}
            </div>
            <div class="w-32 h-2 bg-gray-700 rounded-full mt-1">
              <div id="progress2" class="h-2 bg-cyber-blue rounded-full"></div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

<script>
  // Progress Bar Animation
  function animateProgressBars() {
    const progress1 = document.getElementById("progress1");
    const progress2 = document.getElementById("progress2");

    let width1 = 50;
    let width2 = 70;
    const speed1 = 0.15;
    const speed2 = 0.16;
    const range = 20;
    const phaseOffset = Math.PI / 2;

    function updateProgress() {
      width1 = 50 + Math.sin((Date.now() * speed1) / 200) * range;
      width2 = 70 + Math.sin((Date.now() * speed2) / 150 + phaseOffset) * range;
      if (progress1) {
        progress1.style.width = `${width1}%`;
      }
      if (progress2) {
        progress2.style.width = `${width2}%`;
      }
      requestAnimationFrame(updateProgress);
    }

    requestAnimationFrame(updateProgress);
  }

  window.addEventListener("load", animateProgressBars);
</script>
